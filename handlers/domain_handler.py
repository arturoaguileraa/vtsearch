from pydantic import BaseModel, Field
from typing import Optional, List, Union

# Define the data model for domain queries
class DomainSearchQuery(BaseModel):
    domain_contains: Optional[str] = Field(None, description="Domain contains specific text")
    tld: Optional[str] = Field(None, description="Top-Level Domain (TLD)")
    depth: Optional[List[str]] = Field(None, description="Number of domain levels, can include ranges")
    a_record: Optional[str] = Field(None, description="A record associated with the domain")
    a_record_ttl: Optional[List[str]] = Field(None, description="TTL value of A record, can include ranges")
    aaaa_record: Optional[str] = Field(None, description="AAAA record associated with the domain")
    aaaa_record_ttl: Optional[List[str]] = Field(None, description="TTL value of AAAA record, can include ranges")
    caa_record: Optional[str] = Field(None, description="CAA record data")
    cname_record: Optional[str] = Field(None, description="CNAME record data")
    cname_record_ttl: Optional[List[str]] = Field(None, description="TTL value of CNAME record, can include ranges")
    dname_record: Optional[str] = Field(None, description="DNAME record data")
    dname_record_ttl: Optional[List[str]] = Field(None, description="TTL value of DNAME record, can include ranges")
    mx_record: Optional[str] = Field(None, description="MX record data")
    mx_record_ttl: Optional[List[str]] = Field(None, description="TTL value of MX record, can include ranges")
    ns_record: Optional[str] = Field(None, description="NS record data")
    ns_record_ttl: Optional[List[str]] = Field(None, description="TTL value of NS record, can include ranges")
    soa_record: Optional[str] = Field(None, description="SOA record data")
    txt_record: Optional[str] = Field(None, description="TXT record data")
    txt_record_ttl: Optional[List[str]] = Field(None, description="TTL value of TXT record, can include ranges")
    ttl: Optional[List[str]] = Field(None, description="Minimum TTL value for any DNS record, can include ranges")
    category: Optional[str] = Field(None, description="Category of the domain")
    comment: Optional[str] = Field(None, description="Community comment associated with the domain")
    comment_author: Optional[str] = Field(None, description="Author of a community comment")
    creation_date: Optional[List[str]] = Field(None, description="Domain creation date, can include ranges")
    last_update_date: Optional[List[str]] = Field(None, description="Domain last update date, can include ranges")
    main_icon_dhash: Optional[str] = Field(None, description="Hash of the main favicon for visual similarity search")
    popularity_rank: Optional[List[str]] = Field(None, description="Popularity index rank, can include ranges")
    positive_detections: Optional[List[str]] = Field(None, description="Number of positive detections, can include ranges")
    antivirus_label: Optional[str] = Field(None, description="Antivirus label")
    reputation: Optional[List[str]] = Field(None, description="Reputation score, can include ranges")
    detected_communicating_files_count: Optional[List[str]] = Field(None, description="Number of detected communicating files, can include ranges")
    communicating_files_max_detections: Optional[List[str]] = Field(None, description="Max detections for communicating files")
    detected_downloaded_files_count: Optional[List[str]] = Field(None, description="Number of detected downloaded files, can include ranges")
    downloaded_files_max_detections: Optional[List[str]] = Field(None, description="Max detections for downloaded files")
    detected_referring_files_count: Optional[List[str]] = Field(None, description="Number of detected referring files, can include ranges")
    referring_files_max_detections: Optional[List[str]] = Field(None, description="Max detections for referring files")
    detected_urls_count: Optional[List[str]] = Field(None, description="Number of detected URLs, can include ranges")
    urls_max_detections: Optional[List[str]] = Field(None, description="Max detections for hosted URLs")
    tags: Optional[str] = Field(None, description="Tags associated with the domain")
    registrar: Optional[str] = Field(None, description="Registrar of the domain")
    ssl_issuer: Optional[str] = Field(None, description="SSL certificate issuer")
    ssl_serial: Optional[str] = Field(None, description="SSL certificate serial number")
    ssl_subject: Optional[str] = Field(None, description="SSL certificate subject")
    ssl_thumbprint: Optional[str] = Field(None, description="SSL certificate thumbprint")
    whois_contains: Optional[str] = Field(None, description="WHOIS data contains specific text")
    last_modification_date: Optional[List[str]] = Field(None, description="Last modification date, can include ranges")
    jarm: Optional[str] = Field(None, description="JARM fingerprint")
    parent_domain: Optional[str] = Field(None, description="Parent domain")
    domain_regex: Optional[str] = Field(None, description="Domain regex pattern for search")
    fuzzy_domain: Optional[str] = Field(None, description="Fuzzy domain matching")
    ssl_not_before: Optional[str] = Field(None, description="SSL certificate start validity date")
    ssl_not_after: Optional[str] = Field(None, description="SSL certificate end validity date")
    threat_actor: Optional[str] = Field(None, description="Threat actor associated with the domain")
