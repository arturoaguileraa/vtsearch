import logging
from core.logical_conversion import convert_to_logical_expression
from handlers.modifier_handler import process_logical_query
from core.ai_client import classify_query

# Configurar logging para mostrar informaci√≥n detallada
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def test_pipeline(query: str):
    """Prueba el flujo de conversi√≥n de una consulta en lenguaje natural a una consulta de VirusTotal Intelligence."""

    logging.info(f"üîç Consulta original: {query}")

    # Paso 1: Convertir a expresi√≥n l√≥gica
    logical_query = convert_to_logical_expression(query)
    logging.info(f"üìå Expresi√≥n l√≥gica generada: {logical_query}")

    # Paso 2: Clasificar la categor√≠a autom√°ticamente
    category = classify_query(query)
    logging.info(f"üìÇ Categor√≠a detectada: {category}")

    # Paso 3: Procesar los t√©rminos y convertirlos en operadores de VT Intelligence
    transformed_query = process_logical_query(logical_query, category)
    logging.info(f"‚úÖ Consulta final convertida: {transformed_query}")

    return transformed_query

if __name__ == "__main__":
    # Prueba con diferentes consultas SIN especificar la categor√≠a
    test_queries = [
        "malware y tipo pdf",
    ]

    for query in test_queries:
        print("\n=============================")
        print(f"üîé Probando consulta: {query}")
        print("=============================")
        final_query = test_pipeline(query)
        print(f"üéØ Resultado Final: {final_query}")
